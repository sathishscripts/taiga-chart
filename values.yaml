# Default values for taiga-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: taigaio/taiga
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

taiga: 
  useSecret: false
  secretName: "taiga-secret"
  # Items used to create taiga-secret, if not 
  # will be part of config-map. 
  POSTGRES_DB: "taiga"
  POSTGRES_USER: "taiga"
  POSTGRES_PASSWORD: "taiga"
  POSTGRES_HOST: "taiga-db"
  POSTGRES_PORT: '5432'
  TAIGA_SECRET_KEY: "taiga-back-secret-key"
  RABBITMQ_USER: "taiga"
  RABBITMQ_PASS: "taiga"
  #Items used to create taiga-configmap
  TAIGA_SITES_SCHEME: "http"
  TAIGA_SITES_DOMAIN: "localhost:9000"
  TAIGA_SUBPATH: "" # "" or "/subpath"
  # Please free to add according to 
  #   https://github.com/kaleidos-ventures/taiga-back/blob/main/docker/config.py
  # Email settings. Uncomment following lines and configure your SMTP server
  # EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
  # DEFAULT_FROM_EMAIL: "no-reply@example.com"
  # EMAIL_USE_TLS: "False"
  # EMAIL_USE_SSL: "False"
  # EMAIL_HOST: "smtp.host.example.com"
  # EMAIL_PORT: 587
  # EMAIL_HOST_USER: "user"
  # EMAIL_HOST_PASSWORD: "password"
  # Rabbitmq settings
  # Should be the same as in taiga-async-rabbitmq and taiga-events-rabbitmq
  # Telemetry settings
  ENABLE_TELEMETRY: "True"
  CELERY_ENABLED:  "False"


persistence:
  deployPostgres: false
  enabled: false
  storageClass: ""

    
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


### Any stable/postgres values can be defined here
### 
postgresql:

  ### Create a postgres user, password and database
  ###
  postgresqlUsername: "taiga"
  postgresqlPassword: "taiga"
  postgresqlDatabase: "taiga"

  persistence:
    enabled: false
    size: 2Gi
    # annotations:
    #   "helm.sh/resource-policy": keep

    ### StorageClass for the provisioned PVC.
    ###
    # storageClass: ""

    ### If you prefer using a PVC defined outside of this chart instead, uncomment this
    ### Requires `postgresql.persistence.enabled: true`
    ###
    # existingClaim: ""